var rootCategories,
    users,
    imports,
    processes,
    starTasks,
    starApplications,
    starRules,
    _users,
    _rootCategories;

(function() {
    rootCategories = [{'name':'Import','description':'Import'},{'name':'Process','description':'Process'},{'name':'StarApplication','description':'Star Application'},{'name':'StarRule','description':'Star Rule'},{'name':'StarTask','description':'Star Task'}];
    users = [{'name':'IPOLITYKIN','description':'Igor Politykin'},{'name':'wladis21','description':''},{'name':'TBERNAZZA','description':''},{'name':'SomeName115','description':'John Doe'},{'name':'GTEST4','description':''},{'name':'LAKIMOV','description':'Lana Akimov'},{'name':'ALANA30A','description':''},{'name':'MGILLILAND','description':'Mark Gilliland'},{'name':'XMETTEAUER','description':''},{'name':'gtorres1','description':''},{'name':'wladis18','description':''},{'name':'BROKEN2','description':''},{'name':'SomeName114','description':'John Doe'},{'name':'TOR_CSDP_WEBPORTDEV_TEAM','description':'TOR_CSDP_WEBPORTDEV_TEAM'},{'name':'SOCONNOR','description':''},{'name':'AADEV','description':''},{'name':'VKHAZIN','description':'Victoria Khazin'},{'name':'AANEWDEV','description':''},{'name':'devgirl444','description':'Developer Girl'},{'name':'SERVICEACCOUNTID','description':'serviceaccountid'},{'name':'vkon','description':'Vladamir Kon'},{'name':'KLIU','description':'Kevin Liu'},{'name':'APP_SERVICES_UHMIIS','description':'app_services_UHMIIS'},{'name':'wladis20','description':''},{'name':'CHENRETTY','description':'Callen Henretty'},{'name':'Some Name','description':'John Doe'},{'name':'SomeName116','description':'John Doe'},{'name':'CHOLDEN2','description':''},{'name':'JLANG','description':''},{'name':'NCAI','description':'Nikki Cai'},{'name':'Testkris','description':'kris krishna'},{'name':'wladis10','description':''},{'name':'TARCENEAUX','description':''},{'name':'GWILSON','description':'Ghion Wilson'},{'name':'JDEOL','description':'Jaspreet Deol'},{'name':'DWATSON','description':''},{'name':'dmiller','description':''},{'name':'MHE','description':'Martin He'},{'name':'MJEAN','description':'Macleod Jean'},{'name':'MSHERWOOD','description':'Michael Sherwood'},{'name':'wladis9','description':''},{'name':'CHARRISON','description':''},{'name':'ALANA30','description':''},{'name':'RGUAN','description':'Ryan Guan'},{'name':'SBERGHICI','description':'Stan Berghici'},{'name':'tracyr','description':'Tracy Riley'},{'name':'Som','description':'George Doe'},{'name':'JHTEST','description':''},{'name':'SomeName120','description':'John Doe'},{'name':'wladis','description':''},{'name':'T6Developer','description':'Tracy Developer'},{'name':'LABIMBOLA','description':''},{'name':'RTRICKEY','description':''},{'name':'JHILLMAN','description':''},{'name':'confassoc','description':''},{'name':'READ','description':'Read Only'},{'name':'SomeName133','description':'Ringo Doe'},{'name':'yjin','description':'Yongxun Jin'},{'name':'JCOOK','description':''},{'name':'GkwTest2','description':''},{'name':'SGREY','description':''},{'name':'KRISHNAJA','description':'Krishnaja Thungathurthi'},{'name':'wladis1','description':''},{'name':'NHEINS','description':''},{'name':'GkwTest3','description':''},{'name':'wladis5','description':''},{'name':'MPAVIA','description':'Marco Pavia'},{'name':'NONADMIN','description':''},{'name':'RUSSELLTEST','description':''},{'name':'tchittireddy','description':'Thiru Chittireddy'},{'name':'ctodd','description':''},{'name':'SZHU','description':'Shujie Zhu'},{'name':'CLAIRD','description':'Chris Laird'},{'name':'LTOWERS','description':'Logan Towers'},{'name':'RLOGAN','description':'Russell Logan'},{'name':'JKATZ','description':''},{'name':'MS_ARIELDC_DEV','description':'MS_ARIELDC_DEV'},{'name':'INDNY000026','description':''},{'name':'ASMITH','description':''},{'name':'Instance anonymous','description':'anonymous'},{'name':'YSHTEYMAN','description':'Yulia Shteyman'},{'name':'wladis4','description':''},{'name':'Some Name new','description':'John Doe'},{'name':'AARONV','description':''},{'name':'SomeName15','description':'Testing Kris'},{'name':'wladis11','description':''},{'name':'LPERRY','description':''},{'name':'SomeName555','description':'Marcus Doe'},{'name':'SHART','description':''},{'name':'jsingh','description':'Jas Singh'},{'name':'JDeveloper','description':'Jane Developer'},{'name':'SomeName665','description':'Paul Ramones'},{'name':'test2000','description':'John Smith'},{'name':'BMCCANN','description':''},{'name':'SomeName456','description':'Marcus Doe'},{'name':'gcordell','description':''},{'name':'wladis13','description':''},{'name':'HHUSER','description':''},{'name':'TOR_CMPROXY','description':'TOR_CMPROXY'},{'name':'wladis15','description':''}];
    imports = [{'name':'basicDemographicsImport','description':'*Standard* Basic Demographics Import (no fixed positions)'},{'name':'demographicsImport','description':'*Standard* Demographics Import with Fixed Positions'},{'name':'errorCodeFixImport','description':'import to fix standard errorCodes that changed'},{'name':'standardBpofImport','description':'Standard Data Import for BPOF'},{'name':'standardLevelDefinitionImport','description':'import of data for initial setup of level_definition'},{'name':'standardOrganizationImport','description':'conversion import of organization data for organization, org_level, and org_level_tree'},{'name':'standardPodImport','description':'Standard Pod Import'},{'name':'postalCodeImport','description':'standard import for postalCode table'},{'name':'standardBenefitEventImport','description':'Standard Benefit Event Import - for benefit_event and benefit_event_rule'},{'name':'standardBenefitEventRequiremnt','description':'Standard Benefit Event Requirement'},{'name':'standardBenefitFeaturesImport','description':'standard import for benefitFeature and benefitFeatureValue'},{'name':'standardPlanEligSetBpofImport','description':'Standard Import to load data for Plan Elig Set BPOF'},{'name':'country2CharImport','description':'Import for 2 char ISO 3166 codes'},{'name':'hrImport','description':'HRIS import'},{'name':'standardBpofBenefitCostImport','description':'Standard Data Import for BPOF Benefit Cost'},{'name':'lockboxImportOs','description':'*Standard* Lockbox Import - Outsourcing Billing'},{'name':'standardPostPayrollHrImport','description':'*Standard* Post Payroll HR Import'},{'name':'semanticContextImport','description':'*Standard* Imports standard semantic context'},{'name':'semanticKeyTypeImport','description':'*Standard* Imports semanticKeyType entries'},{'name':'semanticLookupImport','description':'*Standard* Imports standard semantic lookups'},{'name':'aaa','description':'aaa'},{'name':'phipNumberImport','description':'*Standard* Read in phipNumbers for reconciliation reports'},{'name':'standardClientEntryPointImport','description':'*Standard* Imports standard client entry points'},{'name':'clientZeroHRISSIMULATION','description':'Used to import HRIS'},{'name':'orgAcaSummaryImport','description':'*Standard* Import for orgAcaSummary table'},{'name':'convBillingGroupingSchedule','description':'convBillingGroupingSchedule'},{'name':'convCoverageContinuationImport','description':'Conversion Cobra Import'},{'name':'convDependentCoverageImport','description':'Conversion Dependent Coverage Import'},{'name':'convDependentImport','description':'Conversion Dependent Import'},{'name':'convAddressImport','description':'Conversion Address Import'},{'name':'convEmploymentImport','description':'Conversion Employment Import'},{'name':'convInitialBillingBalance','description':'conversion initial billing balance'},{'name':'convMemberCoverageImport','description':'Conversion Member Coverage Import'},{'name':'standardWorkflowImport','description':'*Standard* Workflow Import'},{'name':'convHoursImport','description':'hoursEligibilityBatchTask'},{'name':'convBeneficiaryAssocImport','description':'conversion beneficiary assoc import'},{'name':'convBeneficiaryImport','description':'Conversion Beneficiary Import'}];
    processes = [{'name':'aetnaHipaa834Export','description':'*Standard* HIPAA Export - AETNA'},{'name':'eyeMedHipaa834Export','description':'*Standard* HIPAA Export - EyeMed'},{'name':'principalLifeExport','description':'Princial Life LTD STD Carrier Feed'},{'name':'hrImportAnnualEnrollEvntReinit','description':'Process to reinitiate events (keeping elections as appropriate) that are specified in the process parameters. removes reinitiate flags after processing'},{'name':'aragLegalPlanExportExport','description':'ARAG Legal Coverage Carrier Feed'},{'name':'mssLifeworksHomeScreen','description':'*Standard* Process to load data for the MSS Lifeworks Home Screen'},{'name':'mssEmployeeSearchClear','description':'mssEmployeeSearch'},{'name':'mssEmployeeSearchSelected','description':'mssEmployeeSearch'},{'name':'mssEmployeeSearchAutofill','description':'Fills requestOut.autofill with employees for the mss search screens'},{'name':'mssEmployeeSearch','description':'mssEmployeeSearch'},{'name':'mssEmployeeSearchSetInSession','description':'mssEmployeeSearchSetInSession'},{'name':'mssEmployeeSearchScreen','description':'mssEmployeeSearchScreen'},{'name':'portalAddEstate','description':'* Standard* Updates a portal beneficiary'},{'name':'portalAddUpdateBeneficiary','description':'*Standard Portal* Update Beneficiary Task'},{'name':'idGenerationTestProcess','description':'Test ID Generation'},{'name':'phipDataScreenAddNew','description':'*Standard* Defines necessary params and loads default values for a new PHIP record'},{'name':'addNewPhipData','description':'*Standard* Add New PHIP Data'},{'name':'MDSS.MdssDeleteAddress','description':'Loaded: Sbc.App at 9/4 23:18:08 on HS1REFAPP01.SBCSYSTEMS.LOCAL'},{'name':'Broker.AddGroupInformation','description':'Loaded: BusinessBlocks.BrokerPortal at 9/3 14:52:06 on ATL-06534.msoit.com'},{'name':'BrokerPortal.GetPlanTypes','description':'Loaded: BusinessBlocks.BrokerPortal at 9/3 14:21:15 on ATL-06534.msoit.com'},{'name':'portalRestartEventProc','description':'*Standard* Reinitiates Benefit from the UI in the portal'},{'name':'portalContinueEventProc','description':'*Standard Portal* Process to validate elected benefits from portal.'},{'name':'addNewDependentFlowOk','description':'*Standard* Process for writing data for the dependentDataEventFlow screen for the update dependent data section'},{'name':'ajaxDepElectChgDerivedOptSame','description':'*Standard* Processes change in election status on election screen'},{'name':'dependentFileUploadProcess','description':'Process to determine if a file should be uploaded, calls the compiled service to do the upload, sets up requestIn.documentDirectory, and writes to the database if it is uploaded'},{'name':'dependentFileDenyProcess','description':'Denies document directory row sent in'},{'name':'updateDepDisplayByRelationship','description':'updateDepDisplayByRelationship'},{'name':'electionSummaryPassiveScreen','description':'*Standard* Process to load data to the Election Summary Screen'},{'name':'formsSendEmailEventReminder','description':'Batch for the reminder notice. Pending event enrollment notification for contact preference = \'Email\'.'},{'name':'portalAddUpdateDeleteDependent','description':'* Standard * Process to add/update/delete portal dependent data'},{'name':'warningElectionFlowExit','description':'warning before exiting the flow'},{'name':'benefitEventSave','description':'*Standard* Saves Event Elections'},{'name':'electionsFlowStepNumberBene','description':'*Standard* Process to load the nextScreenFlowStepNumber on the elections exit screen'},{'name':'electionsFlowStepNumberLoad','description':'*Standard* Process to load the nextScreenFlowStepNumber on the elections exit screen'},{'name':'updateDependentFlowOk','description':'*Standard* Process for writing data for the dependentDataEventFlow screen for the update dependent data section'},{'name':'beneficiaryStoreActive','description':'*Standard* Process to store beneficiary elections into memory during the elections screen flow navigation.'},{'name':'ajaxBeneficiaryCancelEditMode','description':'*Standard* cancels edit mode for beneficiary designation'},{'name':'addNewOrgSchedSalaryOk','description':'addNewOrgSchedSalaryOk'},{'name':'convCoverageEventsProcess','description':'Conversion Coverage Events Batch Process'},{'name':'deleteEmployeeEmailAddress','description':'Process to delete selected employee email address'},{'name':'standardSemanticLookupImport','description':'*Standard* Semantic Key Type Import'},{'name':'deleteEmployeeTelephone','description':'deleteEmployeeTelephone'},{'name':'initiateBenefitEventValidatio','description':'*standard* newBenefitEventValidationsTask'},{'name':'oneTimeEntryAchSave','description':'*Standard* oneTimeEntryAchSave'},{'name':'clientRuleConsole','description':'*Standard* Client Rule Console'},{'name':'mssEventFlowWarning','description':'mssEventFlowWarning'},{'name':'eventFlowBackButtonScreen','description':'eventFlowBackButtonScreen'},{'name':'updateBenefitQueueForAeInit','description':'update BQ to BQM for AE Init'},{'name':'payrollExportProcess','description':'payroll export process'},{'name':'payrollExportRetroProcess','description':'payroll export retro process'},{'name':'payrollExportImputedProcess','description':'payroll export imputed process'},{'name':'portalAddBeneficiary','description':'* Standard* Adds a portal beneficiary'},{'name':'billingAdminEmpPaidThruTab','description':'*Standard* Process to set variables for the Employee Paid Through tab'},{'name':'addNewPlanOverrideScreenLoad','description':'*Standard* add new planOverride Screen'},{'name':'medicareDataPersonScreen','description':'*Standard* Medicare Data For Person Screen'},{'name':'editMasterTables','description':'*Standard* Updates Master Tables from History Screen'},{'name':'medicareDataScreenAddNew','description':'*Standard* Blank process to pass process parameters'},{'name':'addNewMedicareData','description':'*Standard* Add New Medicare Data'},{'name':'medicareDataScreen','description':'*Standard* Medicare Data for Master Screen'},{'name':'portalGetOtherRxCovAsOfDate','description':'*Canada Standard* process to run portalGetOtherPrescriptionCoverageAsOfDate'},{'name':'getPhipDataForSelectedPerson','description':'*Standard* Checks PHIP eligibility before loading the selected person\'s PHIP records into requestOut.benefitsAdditionalData'},{'name':'billingInvoiceReportTrans','description':'Billing Transaction Details'},{'name':'phipDataScreen','description':'*Standard* PHIP Data for Master Screen'},{'name':'loadClientRuleGroupForEdit','description':'*Standard* Load ClientRuleGroup for edit.'},{'name':'deleteOrgEmploymentHistory','description':'*Standard* Process to delete selected org employment history entry'},{'name':'dependentAgeAttainmentProcess','description':'Dependent Age Attainment'},{'name':'electionsStore','description':'*Standard* Process to store elections into memory during the elections screen flow navigation.'},{'name':'essLifeworksMyContactInfoCanc','description':'*Standard* Standard process to reload the ESS Lifeworks My Profile screen after change address is canceled'},{'name':'billingFormsDirectBillPreOs','description':'*Standard* PreBill Invoice Statement for Direct Billed - Outsourcing Billing'},{'name':'billingFormsGroupBillPreOs','description':'*Standard* PreBill Invoice Statement for Group Billed - Outsourcing Billing'},{'name':'billingInvoicesDirectBillOs','description':'*Standard* Creates Billing Invoice for Direct Billed - Outsourcing Billing'},{'name':'billingFormsDirectBillNoFileOs','description':'*Standard* Billing Invoice Statement Only for Direct Billed (Members that selected to NOT receive invoice) - Outsourcing Billing'},{'name':'billingFormsDirectBillFileOs','description':'*Standard* Billing Invoice Statement/PDF for Direct Billed (Members that selected to receive invoice) - Outsourcing Billing'},{'name':'billingInvoicesGroupBillOs','description':'*Standard* Creates Billing Invoice for Group Billed - Outsourcing Billing'},{'name':'generateCobraElectPerExpForm','description':'Generates notice of cobra eligibility termination'},{'name':'nonEventFormsProc','description':'Non Event Forms Process'},{'name':'achAuthorizationFormProc','description':'Process for the ACH Authorization Form'},{'name':'quotingBatchCalcProcess','description':'*Standard* Quoting Batch Calc Processing'},{'name':'quotingCalcProcess','description':'*Standard* Quoting Calculation Process'},{'name':'billingAdminAchSearch','description':'*Standard* Process to search for ACH entries on the billingAdminAch screen'},{'name':'billingAdminAchSaveAch','description':'*Standard* Process to save details for an ACH Entry on the billingAdminAch screen'},{'name':'billingAdminAchDeleteAch','description':'*Standard* Process to delete an ACH Entry on the billingAdminAch screen'},{'name':'billingAdminAchAddNewEntryPop','description':'*Standard* Process to load Add New Entry popup (if applicable) on the billingAdminAch/billingAdminEmpAch screens'},{'name':'initializeCCPaymentScreen','description':'*Standard* sets up initial values for the credit card payment processing screens'},{'name':'validateCreditCard','description':'*Standard* validate the credit card number'},{'name':'submitCreditCardPayment','description':'*Standard* process to call STAR that makes credit card payment'},{'name':'reloadCreditCardInitialScreen','description':'reloadCreditCardInitialScreen'},{'name':'reinitAnnualEnrollPre2013Event','description':'Process to reinitiate events (keeping elections as appropriate) that are specified in the process parameters. removes reinitiate flags after processing'},{'name':'reverseAeForPre2013Event','description':'Reverse benefit event batch'},{'name':'carrierPremiumReportDetailsPro','description':'carrierPremiumReportDetailsProcess'},{'name':'carrPremRepDtlsAetna','description':'carrPremRepDtlsAetna'},{'name':'carrPremRepDtlsArag','description':'carrPremRepDtlsArag'},{'name':'carrPremRepDtlsEyeMed','description':'carrPremRepDtlsEyeMed'},{'name':'carrPremRepDtlsPrincipal','description':'carrPremRepDtlsPrincipal'},{'name':'carrPremRepFormAetna','description':'carrPremRepFormAetna'},{'name':'carrPremRepFormArag','description':'carrPremRepFormArag'},{'name':'carrPremRepFormEyeMed','description':'carrPremRepFormEyeMed'},{'name':'essHomeChangeLangPrefEnglish','description':'Process to change the displayed language on the Ess Home Screen.'},{'name':'essLoginChangeLangPref','description':'Process to change the displayed language on the Ess Login Screen.'},{'name':'essHomeChangeLangPrefSpanish','description':'Process to change the displayed language on the Ess Home Screen.'}];
    starTasks = [{'name':'carrierInterfaceDetailInformationScreen','description':'*Standard* Task to load data to the carrierInterfaceDetailInformation screen'},{'name':'writeErCostOverrideTask','description':'*Standard* writes erCostOverride data Task'},{'name':'reloadCarrierInterfaceDetailScreen','description':'*Standard* Task to reload carrierInterfaceDetail screen'},{'name':'setEmployeeDependentIndicatorToDependent','description':'*Standard* Task to set requestOut.employeeDependentIndicator = Dependent'},{'name':'setEmployeeDependentIndicatorToEmployee','description':'*Standard* Task to set requestOut.employeeDependentIndicator = Employee'},{'name':'writeCarrierDetailInformation','description':'*Standard* Task that updates carrier interface employee and dependent from the standard console screens'},{'name':'writeEmailInformation','description':'writeEmailInformation'},{'name':'writeEeCostOverrideTask','description':'*Standard* writes eeCostOverride data Task'},{'name':'portalGetPhipDataTask','description':'*Standard Portal* Get portalPhipData'},{'name':'billingAdminCreditsActions','description':'*Standard* Task to perform all actions on the billingAdminCred/billingAdminEmpCred screens'},{'name':'dependentAgeAttainmentTask','description':'Task for dependent age attainment'},{'name':'achTransScreenLoad','description':'*Standard* achTransScreenLoad'},{'name':'achTransScreenSubmitExportJob','description':'*Standard* achTransScreenSubmitExportJob'},{'name':'demographicFlowValidationsTask','description':'demographicFlowValidationsTask'},{'name':'billingAgedReceivablesReport','description':'*Standard* Billing Aged Receivables Report Task'},{'name':'billingEntityMasterListTask','description':'*Standard* Task for billing Entity Master List report'},{'name':'billingEntitySummaryTask','description':'*Standard* Task for Billing Entity Summary Task'},{'name':'portalGetFormsTask','description':'*Standard* Portal service to retrieve forms for a given employee'},{'name':'portalExpireForm','description':'*Standard* Web Service task to expire a given form'},{'name':'portalGetFormsOnEventTask','description':'*Standard* Retrieve forms for given employee event'},{'name':'addNewPocDataOkButtonTask','description':'*Standard* task to save new POC data'},{'name':'portalSavePocTask','description':'*standard* portalSavePocTask'},{'name':'benefitEventInitiationLoad','description':'*Standard* Task that loads benefitEventInitiation'},{'name':'quotingTask','description':'*Standard* Quoting Task'},{'name':'clientEntryPointImportBatchTask','description':'*Standard* Client Entry Point Import Batch Task'},{'name':'essLoginChangeLangPrefTask','description':'essLoginChangeLangPrefTask'},{'name':'addNewDependentInformationTask','description':'*Standard* task for preparing data for add dependent information screen'},{'name':'coverageHistoryScreen','description':'coverageHistoryScreen'},{'name':'addNewDepAdditionalOkTask','description':'executes addNewDepAdditionalOkApp'},{'name':'portalDeleteUnallocatedBeneficiariesTask','description':'*Standard Portal* Delete all unallocated beneficiaries'},{'name':'portalGetBeneficiaries','description':'* Standard * Get portal beneficiaries task'},{'name':'portalGetBeneficiaryCoverageTypesTask','description':'*Standard Portal* portalGetBeneficiaryCoverageTypesTask'},{'name':'updateEmployeeEligSetHistoryScreen','description':'*Standard* Task to load data for the employeeEligSet History screen'},{'name':'benefitEventInitiation','description':'*Standard* Initiates a Benefit Event'},{'name':'updateEmployeeBenefitEventScreen','description':'*standard* loads data for screen'},{'name':'portalGetCoveragesAsOfDate','description':'*Standard Portal* Get Coverages as of the asOfDate.'},{'name':'portalGetCoveragesEvent','description':'*standard portal* gets coverage data for the event'},{'name':'portalGetDependentCoverageTypes','description':'portalGetDependentCoverageTypes'},{'name':'portalGetDependentTypes','description':'* Standard * Get all dependent types'},{'name':'portalGetEventNavigation','description':'*portal standard* portalGetEventNavigation'},{'name':'portalGetEventSituation','description':'*Standard Portal* portalGetEventSituation'},{'name':'portalGetHraResultTask','description':'*Standard Portal* Get Health Risk Assessment result.'},{'name':'demographicQuickLook','description':'Quick Look'},{'name':'portalGetBeneficiaryTypes','description':'* Standard * This Web Service will return a portalBeneficiaryType array of valid values'},{'name':'portalIgnoreHRATask','description':'*Standard Portal* Set Health Risk Assessment Flag Eq I'},{'name':'portalAddUpdateDeleteDependent','description':'* Standard * Add/update/delete portal dependent data depending on the requestIn.actioNCode value'},{'name':'essHomeChangeLangPrefTask','description':'essHomeChangeLangPrefTask'},{'name':'updateDependentInformationScreen','description':'*Standard* Task that loads data for the updateDependentInformation screen.'},{'name':'writeDependentInformation','description':'*Standard* Task to write dependent information back to the database from the metadata screens'},{'name':'volTermBenefitSummary','description':'volTermBenefitSummaryApp'},{'name':'eventFormsEwsTask','description':'loads data for EWS event forms'},{'name':'dependentDataEventFlow','description':'*Standard* task for loading dependentEventFlow screen'},{'name':'writeDependentInfoFlow','description':'*Standard* writes data from dependentEventFlow screen'},{'name':'updateDependentDataDisplay','description':'*Standard* load data and sets display variables for the update link'},{'name':'addNewDependentDataDisplay','description':'*Standard* sets display data for adding new dependent'},{'name':'updateDepDisplayByRelationshipTask','description':'updateDepDisplayByRelationshipTask'},{'name':'standardHipaa834ExportBatchTask','description':'*Standard* HIPAA Export Batch task used to populate hipaa_export_detail for the standardHipaa834Export file'},{'name':'qmscoDependentsTask','description':'*Standard* Loads the dependents that qualify for QMSCO configuration, for the selected employee employee'},{'name':'qmscoDependentLocksTask','description':'*Standard* Loads a dependents demographic info & QMSCO lock data for the qmscoDependentLocks screen'},{'name':'qmscoAddNewLockTask','description':'*Standard* loads benefits that are QMSCO lock configurable for the add new lock screen'},{'name':'updateBenefitsAdditionalDataFromRequestOutTask','description':'*Standard* updates the BENEFITS_ADDITIONAL_DATA table from requestOut'},{'name':'qmscoEditLockTask','description':'*Standard* Loads a single QMSCO lock record, awaiting editing'},{'name':'addNewOrgEmploymentScreenTask','description':'addNewOrgEmploymentScreenTask'},{'name':'electionFlowBeneficiaryDesignation','description':'*Standard* task to load screen data for designating beneficiares in the election flow'},{'name':'melModalTestScreenTask','description':'melModalTestScreenTask'},{'name':'melModalTestScreenTask2','description':'melModalTestScreenTask2'},{'name':'melModalTestScreenTask3','description':'melModalTestScreenTask'},{'name':'portalSaveDependentPhoto','description':'* Standard * Save portal dependent photo'},{'name':'portalUpdateHraDataTask','description':'writes EA.text49 for HRA completed'},{'name':'portalSavePhoto','description':'* Standard * Save portal member photo'},{'name':'updateBenefitQueueAndEmployeeWorkflowStepForEventForEmailsTask','description':'updateBenefitQueueAndEmployeeWorkflowStepForEventForEmailsTask'},{'name':'returnPhipSummaryScreen','description':'*Standars* return pending elections'},{'name':'returnPhipProcessing','description':'*Standard* displays selected PHIP row for approval denial'},{'name':'portalGetDependentSsnRulesTask','description':'Identifies if the dependent\'s SSN needs to be cataloged. If necessary, loads SSN rules & lists.'},{'name':'convDependentStatusTask','description':'Dependent Status Batch'},{'name':'workflowSummaryScreen','description':'*Standard* loads data for workflow summary screen'},{'name':'updatePlanOverrideTask','description':'*Standard* gets planOverride update Task'},{'name':'portalGetMember','description':'* Standard * Get member portal task'},{'name':'addNewPlanOverrideTask','description':'*Standard* get data for addNewPlanOverride Task'},{'name':'updateCobraDetailsScreen','description':'*Standard* task to save cobra data to benefitsAdditionalData'},{'name':'carrierConsoleScreen','description':'*Standard* Task to load data for the carrier console screen'},{'name':'achExportTaskOs','description':'*Standard* Task for the ACH Export - Outsourcing Billing'},{'name':'billingAdminEntitySaveEntityInSessionAndUpdateRecentEntitiesList','description':'*Standard* Task to update the recent search section, update the group/entity label in session, and set default search criteria'},{'name':'hrImportDeleteIsdTask','description':'hrImportDeleteIsdTask'},{'name':'loadLookupBwOrPersonIdScreenTask','description':'task for load of this screen'},{'name':'lookupBwOrPersonIdTask','description':'task to lookup an ID'},{'name':'addNewEmpAdditionalOkTask','description':'addNewEmpAdditionalOkTask'},{'name':'demographicDataEventFlow','description':'*Standard* task to load data for the demographicDataEventFlow screen'},{'name':'writeAddressInfoFlow','description':'*Standard* writes address to intermediate data or to database from demographicDataEventFlow'},{'name':'writeEmployeeEmailInfoFlow','description':'*Standard* writes employee_email for screen demographicDataEventFlow'},{'name':'updateAddressDataDisplay','description':'*Standard* loads the update address screen from the screen demographicDataEventFlow demographic console'},{'name':'addNewAddressDataDisplay','description':'*Standard* loads display conditions for add new address in demographicDataEventFlow Screen'},{'name':'updateBasicDataDisplay','description':'*Standard* sets data for update section on demographicDataEventFlow screen'},{'name':'updateEmailDataDisplay','description':'*Standard* sets up the email update task for screen demographicDataEventFlow'},{'name':'writeBasicInfoFlow','description':'*Standard* writes data from demographicDataEventFlow screen'},{'name':'addNewEmailDataDisplay','description':'*Standard* sets up data needed to add new email on screen demographicDataEventFlow'},{'name':'employmentConsoleScreen','description':'*Standard* Task to load data for the Employment Console Screen'},{'name':'setFlowIdTask','description':'*Standard* Task to set flowId'},{'name':'employmentUpdateScreen','description':'*Standard* Task to load employee data to the employmentUpdate screen'},{'name':'writeEmployeeOk','description':'*Standard* Task to update employee from the employmentUpdate screen'}];
    starApplications = [{'name':'billingEntityMasterListApp','description':'*Standard* map values for billing entityMasterList report'},{'name':'deleteEmployeeEligibilitySet','description':'*Standard* Application to delete the employee\'s elig set'},{'name':'groupElectedBenefitsDisplayPassiveElection','description':'*Standard* groupElectedBenefitsDisplayPassiveElection'},{'name':'getIntermediateDataForElectionFlow','description':'*Standard* gets data from intermediate data for the election flow'},{'name':'getDataForWorkflowSummarySeveranceEnd','description':'load data for ending a severance period and closing workflow'},{'name':'getDataForElectionFlow','description':'*Standard* loads all necessary data structures for the election and model flows'},{'name':'updateCoverageChangeInElectionsMultiOption','description':'*Standard* Updates Coverage for changes in mutliOption elections-first loops through all ebe to see if in ebee (if in both,either update,terminate or no change)-then loops through all ebee to see if in ebe (if not, insert)'},{'name':'billingAdminCredAssignEditRefreshNames','description':'*Standard* Application to refresh names when editing billing assignments on the billingAdminPay screen'},{'name':'billingAdminCredSetupAssignmentLoadEdit','description':'*Standard* Application to load edit assignment section on billingAdminCred/billingAdminEmpCred screens'},{'name':'calculateSummaryBalanceInfoForRefundedOrAllocatedPartiallyRefundedPayment','description':'*Standard* Application to set data in the billingGroupingBalances structure for refunded or allocated/partially refunded payments'},{'name':'getEmailDetailData','description':'getEmailDetailData'},{'name':'getEmailData','description':'getEmailData'},{'name':'processPopulationOfInitialCarrierPayrollData','description':'*Standard* app to create the data for carrier and payroll for a client converting data onto BW'},{'name':'determineBillingAdjustmentAllocationForInvoicedAmounts','description':'*Standard* Application to determine how much the invoiced amount should be in billing_adjustment_allocation when creating adjustments'},{'name':'saveBeneficiaryAssocEventForElectionFlowV2','description':'*standard* saveBeneficiaryAssocEventForElectionFlowV2'},{'name':'setCarrierPremiumReportFormSalaryHourly','description':'setCarrierPremiumReportFormSalaryHourly'},{'name':'getEmpBenElectsForBillingBasedOnBPO','description':'*Standard* Load shared.empBenElects from memory.empBenElects or memoryempBenElectsMaster for billing logic based on sql.benefitId / sql.planId / sql.optionId'},{'name':'setInfoLogKeysForEventDataFromEmployeeBenefitEventShared','description':'sets keys to load/save infoLog for eventData'},{'name':'checkForNewDependents','description':'*Standard* checkForNewDependents'},{'name':'portalBeneficiaryAssociationChange','description':'*Standard* Check for Beneficiary Association changes and trigger appropriate warning'},{'name':'portalSetVariablesForBenefitEventCompletion','description':'*Standard Portal* portalSetVariablesForBenefitEventCompletion'},{'name':'updateLastElectionMethodApp','description':'updateLastElectionMethodApp'},{'name':'resetFieldsForPHIPApproval','description':'*Standard* resets fields for PHIP approval event'},{'name':'backOutBillingPaymentsCreatedFromInvoice','description':'*Standard* Application to back out billing payments created from an invoice (credit payments)'},{'name':'clearEmpBenefitEventEnrollSharedTaxFields','description':'*Standard* Clear tax fields in shared.empBenefitEventEnroll'},{'name':'essLifeworksLoadBenefitEvents','description':'*Standard* Loads events for ESS'},{'name':'achTransScreenSaveTransactionCancelApp','description':'*Standard* achTransScreenSaveTransactionCancelApp'},{'name':'getOtherPrescriptionCoverageMasterScreen','description':'*Canada Standard* Get otherPrescriptionCoverage master'},{'name':'demographicFlowValidationsApp','description':'demographicFlowValidationsApp'},{'name':'billingAdminCredSetupAssignmentEditAddAnotherRow','description':'*Standard* Adds another row to the edit assignment section on the billingAdminCred/billingAdminEmpCred screens'},{'name':'billingAdminCredManualAllocRefreshTotalsAndValidate','description':'*Standard* Application to perform validations during manual allocation and to update totals on the billingAdminCred screen'},{'name':'updateCreditDetails','description':'*Standard* Application to manually allocate a credit on the billingAdminCred screen'},{'name':'portalGetProofOfAlternativeCoverageDataEventFromInfoLog','description':'*Standard Portal* Get proofOfAlternativeCoverage from InfoLog'},{'name':'translatePortalBenefitPlanOptionToEmpBenefitEventEnrollForStore','description':'*Standard Portal* Translate portalBenefitPlanOption to empBenefitEventEnroll for storage.'},{'name':'setElectedBenefitsDisplayGroupForGroup','description':'setElectedBenefitsDisplayGroupForGroup'},{'name':'updateIntermediateDataForBeneficiaryAssociations','description':'*Standard* Update intermediate data for beneficiary associations'},{'name':'updateBenefitQueueAndReinitiatePendingEvents','description':'*Standard* updates any events in the benefitQueue that can now be initiated because another event is complete'},{'name':'portalTriggerBD01','description':'*Standard Portal* BD01 Trigger for portal beneficiaries'},{'name':'translateEmployeeAlternateCoverageToPortalProofOfAlternativeCoverage','description':'*standard* translateEmployeeAlternateCoverrageToportalProofOfAlternativeCoverage'},{'name':'portalSavePocApp','description':'*standard* portalSavePocApp'},{'name':'addNewPocDataOkButtonApp','description':'*Standard* adds new POC data to employee_alternate_coverage table'},{'name':'loadDataBenefitEventInitiationLoad','description':'loadDataBenefitEventInitiationLoad'},{'name':'portalGetCurrentCoverageData','description':'*Standard Portal* Get Current Coverage Data.'},{'name':'billingAdminCreditsDeleteCredit','description':'*Standard* Application to delete a credit on the billingAdminCred/billingAdminEmpCred screens'},{'name':'setupCreditTypeForBillingAdjustmentAllocation','description':'Find parent row for billing_credit from billing_transaction & set billingVariables.creditType'},{'name':'setBillingGroupingBalancesRequestUnallocatedCredits','description':'*Standard* Application to calculate and set request.requestOut.billingGroupingBalances.unallocatedCredits for the transaction model'},{'name':'quotingPreProcessing','description':'*Standard* Set effectiveDate to today if not passed in . Load quoteDefinition by quoteDefinitionName and effectiveDate.'},{'name':'clientQuotingPreProcessing','description':'*Standard* client hook for quoting preprocessing'},{'name':'clientSetupBatchQuote','description':'*Standard* client hook setting up quoting batch'},{'name':'saveQuote','description':'*Standard* Save Quote'},{'name':'determineEmployeeEligSet','description':'*Standard* Determines Eligibility Set for Employee'},{'name':'invalidChangeToEstateCheck','description':'*Standard Portal* Checks if the employee is trying to change the beneficiary relationship from something other than Trustee to an Estate'},{'name':'fillEmployeeEligSetUpdate','description':'*Standard* fills employeeEligSetUpdate'},{'name':'portalBeneficiaryChange','description':'*Standard* Check Beneficiary info for changes and trigger warning'},{'name':'processBillingPaymentReportTransactionModel','description':'*Standard* Process and Sets Data for Billing Payment Report - Transaction Model'},{'name':'melModalTestScreenApp3','description':'melModalTestScreenApp'},{'name':'updateBeneficiaryStatus','description':'*Standard* app updates beneficiary status based on allocations'},{'name':'determineEmployeePayrollDeductionUpdateTermsWriteZeroes','description':'*Standard* Determine zero deductions to be written for employeePayrollDeductionUpdate'},{'name':'updateImportStagedDataForClientEntryPointImport','description':'*Standard* Updates ISD for client entry point import'},{'name':'setAdditionalDataForDemographicDataDisplay','description':'*NEW 2013* *Standard* app to load and set additional display variables for demographic Data flow screen'},{'name':'clientLoadDataBenefitEventInitiationValidations','description':'*NEW 2013* clientLoadDataBenefitEventInitiationValidations'},{'name':'standardCalculate2xSalaryBenefitAmountWithReductionApp','description':'standardCalculate2xSalaryBenefitAmountWithReductionApp'},{'name':'standardOnElectionFlowDisplayNotEligibleScreen','description':'standardOnElectionFlowDisplayNotEligibleScreen'},{'name':'portalDetectDependentChanges','description':'*Changes* used to check if the demographic data of dependent is changed'},{'name':'portalBeneficiaryCoverageTypeAllocationCheckAndErrorOutput','description':'*Standard Portal* Validates Allocations for beneficiaries'},{'name':'caseManagerRegistrationForEmployeePersonId','description':'*Standard* Application to register member with Case Manager (relies on requestIn.employee.personId being available)'},{'name':'phipDenyProcessInitiation','description':'*Standard* processes the denial of PHIP'},{'name':'pfchangGetDemographicConsoleData','description':'app to load employee email to request out'},{'name':'addNewDepAdditionalOkApp','description':'Add new data to dependent additional'},{'name':'copyDependentRequest','description':'copies dependent request'},{'name':'getPlanOverrideData','description':'*Standard* gets planOverride data'},{'name':'standardCalculate1AndHalfxSalaryBenefitAmountWithReductionSpouseApp','description':'standardCalculate1AndHalfxSalaryBenefitAmountWithReductionSpouseApp'},{'name':'standardCalculate1xSalaryBenefitAmountWithReductionApp','description':'standardCalculate1xSalaryBenefitAmountWithReductionApp'},{'name':'writePremiumOverrideInfo','description':'*Standard* writes premiumOverride Info'},{'name':'getDemographicConsoleEmailAndPhoneDataApp','description':'*Standard* Loads employee\'s email and telephone data for the demographic console'},{'name':'getEmployeeForms','description':'*Standard* Loads the employee forms that are to be displayed on the \'employee forms management\' screen'},{'name':'loadEmployeePayrollUpdateScreenApp','description':'*Standard* loadEmployeePayrollUpdateScreenApp'},{'name':'employeePayrollUpdateApp','description':'*Standard* employeePayrollUpdateApp'},{'name':'determineBenefitDependentsChanged','description':'*Standard* Determine if Benefit\'s dependents changed for completion'},{'name':'getWorkflowSummaryData','description':'*Standard* Loads workflow summary data'},{'name':'addNewOrgSchedSalaryOkApp','description':'addNewOrgSchedSalaryOkApp'},{'name':'determineBenefitLockStatus','description':'*Standard* Determines if the benefit has a lock status'},{'name':'setSessionVariablesForEventFlow','description':'sets session variables for launching in to an event flow for a selected personId'},{'name':'portalGetPortalEventLogAndPortalEventStatusHistoryData','description':'*standard portal* sets data for event details method'},{'name':'standardLoadDataToDetermineEligSet','description':'Load data to determine Elig Set'},{'name':'generateEmployeePayrollDeduction','description':'*Standard* Generate employeePayrollDeduction rows'},{'name':'portalMyDetailsData','description':'*standard* application to get myDetails for portal'},{'name':'clientAjaxChangeInElectionStatusOgcDerivedOptionSeperate','description':'*standard* client hook for additional status updates on OGC derived option screen'},{'name':'clientAjaxChangeInElectionStatusDerivedOptionSame','description':'*standard* client hook for additional processing needed for election derived option same screen'},{'name':'createDependentAssocEvent','description':'*Standard* Creates dependentAssocEvent for Event Initiation'},{'name':'processEoiApproveDenyInitiation','description':'*Standard* application to process EOI approve/deny for step approach processing. Called as benefit event rule in initiation (eoiApproveDeny)'},{'name':'portalDetectBeneficiaryChangeOnCompletion','description':'*Standard* Detect beneficiary change from current during completion'},{'name':'getBeneficiaryCoverageTypes','description':'*Standard Portal* getBeneficiaryCoverageTypes'},{'name':'portalSetBeneficiaryCoverageTypeAllocationOption','description':'*Standard Portal* Set Allocation Option for beneficiaryCoverageTypes'},{'name':'saveQuoteToInfoLog','description':'*Standard* saves Quote information to infoLog'},{'name':'clearTempQuoteVariables','description':'*Standard* clear all quoting variables Temp namespace'},{'name':'fillQuotingTempVariables','description':'*Standard* Fill quoting temp variables'},{'name':'getBeneficiaryCoverageTypesNull','description':'*Standard Portal* getBeneficiaryCoverageTypesNull'},{'name':'essHomeChangeLangPrefApp','description':'essHomeChangeLangPrefApp'},{'name':'setElectionSummaryElectionButtonDisplay','description':'*New 2013* setElectionSummaryElectionButtonDisplay'}];
    starRules = [{'name':'concatinateEmployeeFirstNameFromSharedAndSpaceForSession','description':'*Standard* Rule to concatinate employee.firstName and space. Will be used to set session.employeeName'},{'name':'cobraStatusEqElected','description':'*Standard* cobraStatus = elected'},{'name':'setRESDtext8EqBillingGroupingDescription','description':'*Standard* set reportExportStagedData[i].text8 = billingGrouping.description'},{'name':'comboTableSendEmailMessageText','description':'*STANDARD* sends text from coboTableDetail.text5'},{'name':'writeAddressUpdateRequest','description':'*Standard* Writes address from requestIn.addressUpdate'},{'name':'executeSetDependentStatus','description':'executes setDependentStatus'},{'name':'setBenefitElectionsDisplayRequestOutDisplayEffDatesEqFalse','description':'sets the bool to false'},{'name':'BenefitsAdditionalDataRequestInText6EffDateEqNull','description':'*Standard* checks if requestIn.benefitsAdditionalData.text6EffDate is Null'},{'name':'setCarrierInterfaceEmployeeCarrierInterfaceId','description':'*Standard* Sets carrierInterfaceId from sql'},{'name':'setProcessParameterDefaultSharedParameterNameEqStatuses','description':'*Standard* Sets shared.processParameterDefault[shared.index.processParameterDefaultIndex].parameterName = statuses'},{'name':'setSessionStateFromDemographicDisplay','description':'setSessionAddress2FromDemographicDisplay'},{'name':'setProcessParameterDefaultSharedParameterNameEqRelations','description':'*Standard* Sets shared.processParameterDefault[shared.index.processParameterDefaultIndex].parameterName = relations'},{'name':'clientSetSqlOrganizationIdAndEmployeeSet','description':'*Standard* client hook to set sql.organizationId and sql.employeeSet'},{'name':'executeGetBeneficiaryDataForElectionFlow','description':'*Standard* getBeneficiaryDataForElectionFlow'},{'name':'setSelectedWorkflowDisplayWorkflowSequenceNoFromWorkflowSequenceNoRequestIn','description':'set requestOut.selectedWorkflowDisplay.workflowSequenceNo= requestIn.workflowSequenceNo'},{'name':'displayMessageRequestOutEqFalse','description':'*Standard* Checks if request.requestOut.displayMessage = false'},{'name':'setSelectedWorkflowDisplayWorkflowStepIdFromWorkflowStepIdRequestIn','description':'set requestOut.selectedWorkflowDisplay.workflowStepId= requestIn.workflowStepId'},{'name':'getBwIdRequestInFromRequestInPersonId','description':'Set bwId from request.requestIn.personId'},{'name':'executeSetEmpBenefitEventEnrollCoverageTypeForScreens','description':'*Standard* Executes application setEmpBenefitEventEnrollCoverageTypeForScreens'},{'name':'loadBenefitsAdditionalDataOtherGroupCoverageRequestPodMasterAsOfDate','description':'*Standard* Load other grouped coverage information'},{'name':'loadEmpBenefitEventEnrollMemoryStructureToMemoryStructureFromRequestIn','description':'*Standard* Loads empBenefitEventEnrollMemory all benefits to memory from requestIn'},{'name':'loadEmpBenefitEventEnrollMemoryToMemoryByBenefitEventIdBenefitEventDateInitiationPrn','description':'*Standard* Loads elected empBenefitEventEnroll to empBenefitEventEnrollMemory structure to memory for all benefits by benefitEventId and benefitEventDate and initiationPrn'},{'name':'dependentSharedRelationEqP','description':'requestInDependentRelationEqP'},{'name':'copyCarrierInterfaceEmpMastSharedToCarrierInterfaceDisplayRequest','description':'*Standard* Copies shared.carrierInterfaceEmpMast[shared.index.carrierInterfaceEmpMastIndex] to request.requestOut.carrierInterfaceDisplay[shared.index.carrierInterfaceDisplayIndex]'},{'name':'incrementCarrierInterfaceDisplayIndex','description':'*Standard* Adds 1 to carrierInterfaceDisplayIndex'},{'name':'setSqlCodeEqRESDtext6','description':'*Standard* set sql.code = shared.ReportExportStagedData[i].text6'},{'name':'setSqlCodeEqRESDtext7','description':'*Standard* set sql.code = shared.ReportExportStagedData[i].text7'},{'name':'merIsIdGenerationCalculationMethodEqEFS','description':'*JLM*'},{'name':'merIsIdGenerationCalculationMethodEqEDS','description':'*JLM*'},{'name':'addBillingTransactionSharedTransactionAmountToBillingCreditSharedCreditAmountToSetBillingCreditSharedRefundedAmount','description':'*Standard* Adds shared.billingTransaction[shared.index.billingTransactionIndex].transactionAmount to shared.billingCredit[shared.index.billingCreditIndex].creditAmount to set shared.billingCredit[shared.index.billingCreditIndex].refundedAmount'},{'name':'deleteEmployeeEligSet','description':'*Standard* Deletes selected employee_elig_set data'},{'name':'setSqlBwIdEqBillingCreditRequestInBwId','description':'*Standard* Sets sql.bwId = request.requestIn.billingCredit[shared.index.billingCreditIndex].bwId'},{'name':'billingAdminCredAssignEditRequestPersonIdEqNull','description':'*Standard* Checks if request.requestOut.billingAdminCredAssignEdit[shared.index.billingAdminCredAssignEditIndex].personId is null'},{'name':'billingCreditAmountsRequestTotalAssignedEqBillingCreditRequestCreditAmount','description':'*Standard* Checks if request.requestOut.billingCreditAmounts.totalAssigned = request.requestOut.billingCredit[shared.index.billingCreditIndex].creditAmount'},{'name':'billingCreditAmountsRequestTotalRemainingGtSqlTotalRemaining','description':'*Standard* Checks if request.requestOut.billingCreditAmounts.totalRemaining > sql.billingPaymentAmounts.totalRemaining'},{'name':'loadBillingAdminInvoiceDetailsTransFooterRequestByBillingGroupingIdBillingEntityIdProcessReferenceNumberGroupByItem','description':'*Standard* Loads requestOut.billingAdminInvoiceDetailsTransFooter for an invoice\'s transactions grouped by item'},{'name':'billingCreditSharedBillingCreditIdGt0','description':'*Standard* Checks if shared.billingCredit[shared.index.billingCreditIndex].billingCreditId > 0'},{'name':'billingCreditSharedStatusEqP','description':'*Standard* Checks if shared.billingCredit[shared.index.billingCreditIndex].status = P'},{'name':'clientOverrideBillingCreditRefundReasonCode','description':'Executes client application to override shared.billingCredit.refundReasonCode when refunding a reallocation credit during invoicing'},{'name':'clientUpdateBillingAdjustmentAllocationShared','description':'Executes client application to reset variables in shared.billingAdjustmentAllocation as needed'},{'name':'billingCreditAssignmentRequestInStatusEqP','description':'*Standard* Checks if request.requestIn.billingCreditAssignment[shared.index.billingCreditAssignmentIndex].status = P'},{'name':'sumAllocatedAmountsAfterLastInvoiceThatHaveNotBeenReversed','description':'*Standard* Loads sum of allocated_amount to shared.billingPaymentAllocation by billingGroupingId, billingEntityId, billingPaymentSeq, allocatedDate > :invoiceDate and reversedDate is null'},{'name':'addToBillingGroupingBalancesRequestPaymentAmountsUnallocatedBillingPaymentSharedAmountReceivedMinusBillingPaymentAllocationSharedAllocatedAmount','description':'*Standard* Adds to requestOut.billingGroupingBalances.paymentAmountsUnallocated (shared.billingPayment.amountReceived - shared.billingPaymentAllocation.allocatedAmount)'},{'name':'setSqlBillingPaymentSeqEqRequestInBillingPaymentSeq','description':'*Standard* Sets sql.billingPaymentSeq = request.requestIn.billingPaymentSeq'},{'name':'loadCountPendingBillingCreditAssignmentsForPaymentToRetrievalStructureSharedIntegerValue','description':'*Standard* Loads count of pending billing credit assignments for a billingCreditId to shared.retrievalStructure.integerValue'},{'name':'clientOverrideBillingEntityAchRequestInVariables','description':'*Standard* clientOverrideBillingEntityAchRequestInVariables'},{'name':'loadSumBillingPaymentAllocationSharedAllocatedAmountByBillingGroupingIdBillingEntityIdBillingPaymentSeqReversedDateIsNull','description':'*Standard* Loads sum of allocated_amount to shared.billingPaymentAllocation where billing_grouping_id = :billingGroupingId and billing_entity_id = :billingEntityId and billing_payment_seq = :billingPaymentSeq and reversed_date is null'},{'name':'loadSumBillingTransactionSharedTransactionAmountByBillingGroupingIdBillingEntityIdBillingCreditId','description':'*Standard* Loads sum(billing_transaction.transaction_amount) to shared.billingTransaction.transactionAmount where billing_grouping_id = :billingGroupingId and billing_entity_id = :billingEntityId and billing_credit_id = :billingCreditId'},{'name':'loadBillingAdminAchResultsRequestByBillingGroupingIdBillingEntityId','description':'*Standard* Loads requestOut.billingAdminAchResults where billing_grouping_id = :billingGroupingId and billing_entity_id=:billingEntityId'},{'name':'loadBillingAdminAchResultsRequestOutByBillingEntityId','description':'*Standard* Loads requestOut.billingAdminAchResults by :billingGroupingId, :billingEntityId and exists (select 1 from employee_map where person_id = billing_entity_ach.billing_entity_id and bw_id = :bwId)'},{'name':'setBillingVariablesBillingInvoiceSeqSharedEqBillingInvoiceBillingInvoiceSeqShared','description':'*Standard* Set shared.billingVariables.billingInvoiceSeq = shared.billingInvoice.billingInvoiceSeq'},{'name':'loadCgValDetailSharedByBenefitEligStatusAndCode','description':'*Standard* Loads cgValDetail row by sql.code from and cgValId = \'benefitEligStatus\''},{'name':'loadEmployeeBenefitEligShared','description':'*STANDARD* load EmployeeBenefitElig'},{'name':'loadBillingItemSharedFromMemoryByBillingItemId','description':'*Standard* Loads shared.billingItem from memory where billing_item_id = :billingItemId'},{'name':'setBeneficiaryAssocEventUpdateEffDate','description':'*Standard* sets beneficiaryAssocEventUpdate.effdate from requestIn.benefitEventDate'},{'name':'setEmployeeBenefitEventLastDateElectionSavedIsNullTrue','description':'*Standard* Sets employeeBenefitEvent.lastDateElectionsSavedIsNull to true'},{'name':'setCarrierInterfaceDependentUpdateChangeBenefitEventDateIsNullTrue','description':'*Standard* Sets carrierInterfaceDependentUpdate.changeBenefitEventDateIsNull to true'},{'name':'incrementCarrierInterfaceEmployeeUpdateIndex','description':'*Standard* Adds 1 to carrierInterfaceEmployeeUpdateIndex'},{'name':'setSqlDepSeqNoFromCarrierInterfaceDependent','description':'*Standard* Sets sql.depSeqNo = shared.carrierInterfaceDependent[shared.index.carrierInterfaceDependentIndex].depSeqNo'},{'name':'addSchedAmtToContributionsYearToDate','description':'*Standard* adds employee_payroll_deduction.ded_amt to processVariables.contributionsYearToDate'},{'name':'setInitiationCompleteEqYAndInfoNotEligibleForBenefits','description':'*Standard* sets event to autocomplete for people who are not eligible for benefits and trips informational error'},{'name':'incrementEmpBenElectsMastFeatureUpdateIndex','description':'*Standard* Increments EmpBenElectsMastFeatureUpdateIndex by 1'},{'name':'loadEmployeeBenefitEligSharedByBenefitId','description':'*Standard* Loads shared.employeeBenefitElig by :benefitId'},{'name':'loadEmployeePayrollDeductionEndDateAfterPerBeginDateToMemory','description':'*Standard* load EmployeePayrollDeduction To Memory'},{'name':'loadPrDedBpofByBPAndPayrollProvider','description':'*Standard* Loads prDedBpof for a Benefit and plan and a provider'},{'name':'setSqlPrScheduleYearFromPayrollSchedule','description':'*Standard* Sets prScheduleYear from payroll schedule'},{'name':'loadBillingItemToMemory','description':'*Standard* Loads billing_item to memory'},{'name':'benefitEventBilling','description':'*Standard* Determines if Billing is updated'},{'name':'calculateEmpBenElectsEeCostBilling','description':'*Standard* Calculates amountInvoicedTemp based on empBenElects.eeCostYear'},{'name':'billingVariablesAmountAdjustedSharedNotEq0','description':'*Standard* Tests for amountAdjusted <> 0'},{'name':'calculateBillingAdjustmentAmount','description':'*Standard* Sets shared.billingVariables.amountAdjusted = shared.billingVariables.amountInvoiced - (shared.billingLineItem[shared.index.billingLineItemIndex].amountInvoiced + amountAdjustments)'},{'name':'executeCreateBillingAdjustmentForInvoicePeriod','description':'*Standard* executes createBillingAdjustmentForInvoicePeriod app'},{'name':'executeGetOptionInfoForBillingItemInclude','description':'*Standard* loads optionInfo based on billingItemInclude'},{'name':'sizeAddressSharedEq0','description':'*Standard* Checks if size.shared.address = 0'},{'name':'loadBillingLineItemForCoverageStartDateToCoverageEndDateGroupedByBPO','description':'*Standard* loads billingLineItem grouped by coverageStartDate and BPO'},{'name':'executeFillBillingAdjustmentAllocationCompletion','description':'*Standard* Execute application fillBillingAdjustmentAllocationCompletion'},{'name':'cobraEmployeeAndSqlBenefitIdEqCobraBenefitsOs','description':'*Standard* Check if employee has a Billable Cobra Status'},{'name':'clientModifyBillingVariablesAmountInvoicedTempShared','description':'*Standard* processBillingBasedOnEmpBenElects client hook'},{'name':'testBillingInvoicePaymentIndex','description':'*Standard* Determines if more shared.billingInvoicePayment rows'},{'name':'billingVariablesSharedTransactionTypeEqR','description':'*Standard* Checks if shared.billingVariables.transactionType = R (reallocation credit)'},{'name':'setBillingLineItemControlIdSharedFromRequestInControlId','description':'*Standard* Set shared.billingLineItem[billingLineItemIndex].controlId = requestIn.controlId'},{'name':'setImportStagedDataTextErrorFlagEqY','description':'Set ISD Error Flag = \'Y\''},{'name':'loadBillingGroupingToMemory','description':'*Standard* Loads billing_grouping to memory'},{'name':'noCurrentElectionBenefitInitiation','description':'noCurrentElectionBenefitInitiation'},{'name':'doCostCalculation','description':'*Standard* execute any or all cost calculations'},{'name':'doDefaultElection','description':'*Standard* Determine if execute default election'},{'name':'setSqlBenefitEventDateRoundedFirstOfNextYearEqSqlBenefitEventDate','description':'setSqlBenefitEventDateRoundedFirstOfNextYearEqSqlBenefitEventDate'},{'name':'billingEntityIdRequestInEqAetna','description':'billingEntityIdRequestInEqAetna'},{'name':'billingEntityIdRequestInEqArag','description':'billingEntityIdRequestInEqArag'},{'name':'loadBillingItemToMemoryForAetna','description':'loadBillingItemToMemoryForAetna'},{'name':'loadBillingItemToMemoryForArag','description':'loadBillingItemToMemoryForArag'},{'name':'loadBillingItemToMemoryForEyeMed','description':'loadBillingItemToMemoryForEyeMed'},{'name':'loadBillingItemToMemoryForPrincipal','description':'loadBillingItemToMemoryForPrincipal'},{'name':'requestInEmployeeFormStatusIsNotAorR','description':'*Standard* checks that requestIn.employeeForm.status is not A or R'},{'name':'loadBillingItemIncludeToMemoryForArag','description':'loadBillingItemIncludeToMemoryForArag'},{'name':'loadBillingItemIncludeToMemoryForEyeMed','description':'loadBillingItemIncludeToMemoryForEyeMed'},{'name':'loadBillingItemIncludeToMemoryForPrincipal','description':'loadBillingItemIncludeToMemoryForPrincipal'},{'name':'loadBillingItemAndBillingItemIncludeToMemoryForAetna','description':'loadBillingItemAndBillingItemIncludeToMemoryForAetna'},{'name':'loadBillingItemAndBillingItemIncludeToMemoryForArag','description':'loadBillingItemAndBillingItemIncludeToMemoryForArag'},{'name':'loadBillingItemAndBillingItemIncludeToMemoryForEyeMed','description':'loadBillingItemAndBillingItemIncludeToMemoryForEyeMed'}];
})();

module.exports = {
    __key: 'packaging:'
};
module.exports['packaging:import'] = _import;
module.exports['packaging:process'] = _process;
module.exports['packaging:rootCategory'] = _rootCategory;
module.exports['packaging:starTask'] = _starTask;
module.exports['packaging:starApplication'] = _starApplication;
module.exports['packaging:starRule'] = _starRule;
module.exports['packaging:user'] = _user;
module.exports['packaging:categoryItem'] = _categoryItem;


function _categoryItem(dependencies) {
    var user = dependencies.packagingUser,
        category = dependencies.packagingRootCategory,
        row,
        item;

    switch(category.name) {
        case 'Import':
            item = imports.randomValue();
            break;
        case 'Process':
            item = processes.randomValue();
            break;
        case 'StarApplication':
            item = starApplications.randomValue();
            break;
        case 'StarRule':
            item = starRules.randomValue();
            break;
        case 'StarTask':
            item = starTasks.randomValue();
            break;
    }

    row = {
        userName: user.name,
        userDescription: user.description,
        categoryName: category.name,
        categoryDescription: category.description,
        name: item.name,
        description: item.description
    };

    return row;
}
_categoryItem.processDependencies = function(dependencies) {
    var data = {};
    dependencies.forEach(function(dep) {
        data[dep.config] = dep.data.randomValue();
    });
    return data;
};

function _import() {

}
_import.processDependencies = function(dependencies) {

};

function _process() {

}
_process.processDependencies = function(dependencies) {

};

function _rootCategory() {
    var category = _rootCategories.shift();
    return {
        name: category.name,
        description: category.description
    };
}
_rootCategory.reset = function() {
    console.log('resetting root category');
    _rootCategories = rootCategories;
};

function _starTask() {

}
_starTask.processDependencies = function(dependencies) {

};

function _starApplication() {

}
_starApplication.processDependencies = function(dependencies) {

};

function _starRule() {

}
_starRule.processDependencies = function(dependencies) {

};

function _user() {
    var user = _users.shift();
    return {
        name: user.name,
        description: user.description.length ? user.description : user.name
    }
}
_user.reset = function() {
    console.log('resetting user');
    _users = users;
};